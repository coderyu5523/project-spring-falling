<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music Player</title>
    <link rel="stylesheet" href="/css/current-playlist.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
</head>

<body>
<div class="container">
    <div class="left-panel">
        <div id="song-name" style="font-size: 20px; font-weight: 600; margin-bottom: 10px">재생중인 음악이 없습니다.</div>
        <div id="artist-name" style="font-size: 15px; color: gray; margin-bottom: 20px"></div>
        <img id="cover-image" src="/upload/album/main-cover.jpg" style="width: 400px">
        <div id="lyrics-list" style="font-size: 15px; color: gray; margin-bottom: 20px; white-space: pre-line">가사가 없습니다.</div>
    </div>
    <div class="right-panel">
        <div>
            <h2>Playlist</h2>
            <hr>
            <div class="search-bar">
                <i class="fa fa-search"></i>
                <input type="text" placeholder="재생목록에서 검색하세요.">
            </div>

            <ul id="song-list">
                <!-- 여기에 재생목록 추가 됨-->
            </ul>
        </div>
    </div>
</div>

<div class="footer album-art">
    <div class="progress">
        <span id="currentTime">00:00</span>
        <input type="range" id="progressBar" min="0" max="100" value="0">
        <span id="duration">00:00</span>
    </div>
    <div class="controls">
        <div></div>
        <div>
            <button id="shuffle-btn"><i class="fa-solid fa-shuffle"></i></button>
            <button id="prev-btn">&#9664;&#9664;</button>
            <button id="play-btn">&#9654;</button>
            <button id="next-btn">&#9654;&#9654;</button>
            <button id="mode-btn"><i class="fa-solid fa-repeat"></i></button>
        </div>
        <div><a class="add-page" style="cursor: pointer"><i class="fa-solid fa-sliders"></i></a></div>
    </div>
    <audio id="audio-player">
        <source src="" type="audio/mpeg">
    </audio>
</div>

<script>
    $(document).ready(function () {
        // Local Storage에서 데이터 읽기
        var currentSongs = JSON.parse(localStorage.getItem('currentSongs')) || [];
        var newSongData = JSON.parse(localStorage.getItem('currentSong'));

        // 새 노래 데이터를 목록에 추가
        if (newSongData) {
            currentSongs.push(newSongData);
            localStorage.setItem('currentSongs', JSON.stringify(currentSongs));
        }

        // 플레이리스트 렌더링
        function renderPlaylist(songs) {
            $('#song-list').empty(); // 목록 초기화

            songs.forEach(function(song, index) {
                var li = $('<li>').addClass('d-flex').attr('data-index', index); // data-index 속성 추가
                var img = $('<img>').attr('src', song.coverImg).addClass('playlist-img').css('width', '50px');
                var infoDiv = $('<div>').addClass('info');
                var a = $('<a>').attr('href', '#');
                var titleDiv = $('<div>').text(song.title).css({'font-size': '15px', 'font-weight': '600'});
                var artistDiv = $('<div>').text(song.artistName).css({'font-size': '12px', 'color': 'gray'});

                a.append(titleDiv).append(artistDiv);
                infoDiv.append(a);

                var iconContainer = $('<div>').addClass('icon-container');
                var listIcon = $('<a>').attr('href', '#').append($('<i>').addClass('album-icon fas fa-list icon').css('margin-right', '10px'));
                var moreIcon = $('<a>').attr('href', '#').append($('<i>').addClass('fas fa-ellipsis-v icon').css('color', 'white'));

                iconContainer.append(listIcon).append(moreIcon);

                li.append(img).append(infoDiv).append(iconContainer);

                $('#song-list').append(li);
            });
        }

        renderPlaylist(currentSongs);

        // 첫 번째 노래를 페이지에 반영
        if (currentSongs.length > 0) {
            var firstSong = currentSongs[0];
            $('#song-name').text(firstSong.title);
            $('#artist-name').text(firstSong.artistName);
            $('#cover-image').attr('src', firstSong.coverImg);
            $('#audio-player').attr('src', firstSong.musicFile);
        }

        const audioPlayer = $('#audio-player')[0];
        const songList = $('#song-list');
        const prevBtn = $('#prev-btn');
        const playBtn = $('#play-btn');
        const nextBtn = $('#next-btn');
        const modeBtn = $('#mode-btn');
        const shuffleBtn = $('#shuffle-btn');
        const songName = $('#song-name');
        const artistName = $('#artist-name');
        const coverImage = $('#cover-image');
        const currentTimeSpan = $('#currentTime');
        const progressBar = $('#progressBar');
        const durationSpan = $('#duration');
        const lyricsList = $('#lyrics-list');

        const PLAY_MODES = [
            {icon: '<i class="fa-solid fa-repeat"></i>', name: 'normal'},
            {icon: '<i class="fas fa-repeat" style="color: #3f3fff"></i> <span>1</span>', name: 'repeat-one'},
            {icon: '<i class="fa-solid fa-repeat" style="color: #3f3fff"></i>', name: 'repeat-all'}
        ];

        let currentIndex = 0;
        let previousIndex = null;
        let songs = currentSongs;
        let currentModeIndex = 0; // 초기 모드는 normal
        let currentLyrics = [];
        let lyricsIndex = 0;
        let listenCount = 0;
        let isOneMinutePassed = false;

        // 플레이 리스트 재생/일시정지 버튼 처리
        playBtn.on('click', function () {
            if (audioPlayer.src === '') {
                // 버튼 클릭 시 첫 번째 노래 재생
                playSong(0);
            } else if (audioPlayer.paused) {
                audioPlayer.play();
            } else {
                audioPlayer.pause();
            }
        });

        // 노래 재생 함수
        function playSong(index) {
            var song = songs[index];
            songName.text(song.title);
            artistName.text(song.artistName);
            audioPlayer.src = song.musicFile;
            coverImage.attr('src', song.coverImg);
            audioPlayer.play();

            // 가사 업데이트
            updateLyrics(song.lyrics);

            // 이전에 재생 중이었던 노래의 active 속성 제거
            if (previousIndex !== null && previousIndex !== index) {
                songList.children().eq(previousIndex).removeClass('active');
            }
            songList.children().eq(index).addClass('active');

            previousIndex = index;
            currentIndex = index;
        }

        // 가사 업데이트 함수
        function updateLyrics(lyrics) {
            lyricsList.empty();
            currentLyrics = lyrics || [];
            lyricsIndex = 0;
            if (currentLyrics.length > 0) {
                lyricsList.append('<p>' + currentLyrics[lyricsIndex].text + '</p>');
            } else {
                lyricsList.append('<p>가사 없음</p>');
            }
        }

        // progressBar의 값을 현재 재생 시간으로 업데이트
        function updateProgress() {
            progressBar.val(audioPlayer.currentTime);
            // currentTimeSpan에 현재 재생 시간을 포맷, 텍스트로 출력
            currentTimeSpan.text(formatTime(audioPlayer.currentTime));
            updateCurrentLyrics(audioPlayer.currentTime);

            // 1분 이상 재생되었는지 확인
            if (!isOneMinutePassed && audioPlayer.currentTime >= 60) {
                isOneMinutePassed = true;
                listenCount++;
                console.log('Listen count incremented:', listenCount); // listenCount 증가 확인용 콘솔 로그
            }
        }

        // 현재 시간에 맞는 가사 표시 함수
        function updateCurrentLyrics(currentTime) {
            if (lyricsIndex < currentLyrics.length - 1 && currentTime >= currentLyrics[lyricsIndex + 1].time) {
                lyricsIndex++;
                lyricsList.empty();
                lyricsList.append('<p>' + currentLyrics[lyricsIndex].text + '</p>');
            }
        }

        // progressBar의 값이 변경될 때 오디오의 현재 재생 시간을 progressBar의 값으로 설정
        progressBar.on('change', function () {
            audioPlayer.currentTime = progressBar.val();
        });

        // 초를 분과 초로 변환하여 "분:초" 형식의 문자열로 표시
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
        }

        // 노래 목록 클릭 시 재생
        songList.on('click', 'li', function () {
            const index = $(this).index();
            playSong(index);
        });

        // 오디오 플레이어의 재생 시간이 업데이트될 때마다 updateProgress 함수 호출
        $(audioPlayer).on('timeupdate', updateProgress);

        // 오디오 데이터가 로드되면 progressBar의 최대값을 오디오의 전체 길이로 설정.
        $(audioPlayer).on('loadedmetadata', function () {
            progressBar.attr('max', audioPlayer.duration);

            // durationSpan에 오디오의 전체 길이를 포맷하여 텍스트로 설정합니다.
            durationSpan.text(formatTime(audioPlayer.duration));
        });

        // 모드 변경 버튼 클릭 이벤트 리스너
        modeBtn.on('click', function () {
            currentModeIndex = (currentModeIndex + 1) % PLAY_MODES.length;
            updatePlayMode();
        });

        // 모드 업데이트 함수
        function updatePlayMode() {
            const playMode = PLAY_MODES[currentModeIndex];
            modeBtn.html(playMode.icon);

            switch (playMode.name) {
                case 'normal':
                    audioPlayer.loop = false;
                    break;
                case 'repeat-all':
                    audioPlayer.loop = false;
                    break;
                case 'repeat-one':
                    audioPlayer.loop = true;
                    break;
            }
        }

        // 오디오 플레이어가 끝났을 때 이벤트 처리
        $(audioPlayer).on('ended', function () {
            if (PLAY_MODES[currentModeIndex].name === 'repeat-one') {
                audioPlayer.play();
            } else if (PLAY_MODES[currentModeIndex].name === 'repeat-all') {
                currentIndex = (currentIndex + 1) % songs.length;
                playSong(currentIndex);
            } else {
                currentIndex = (currentIndex + 1) % songs.length;
                if (currentIndex === 0) {
                    audioPlayer.pause();
                } else {
                    playSong(currentIndex);
                }
            }
        });

        // 이전 곡 재생 함수
        function playPrevious() {
            currentIndex = (currentIndex - 1 + songs.length) % songs.length;
            playSong(currentIndex);
        }

        // 다음 곡 재생 함수
        function playNext() {
            currentIndex = (currentIndex + 1) % songs.length;
            playSong(currentIndex);
        }

        // 셔플 버튼 클릭 이벤트 리스너
        shuffleBtn.on('click', function () {
            shuffleArray(songs);
            renderPlaylist(songs);
            playSong(0);
        });

        // 배열 셔플 함수
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        // 재생/일시정지 상태에 따라 버튼 텍스트 변경
        $(audioPlayer).on('play', function () {
            playBtn.html('<i class="fas fa-pause"></i>');
        });

        $(audioPlayer).on('pause', function () {
            playBtn.html('<i class="fas fa-play"></i>');
        });

        // playPrevious, playNext 함수 추가
        prevBtn.on('click', playPrevious);
        nextBtn.on('click', playNext);

        // 초기 모드 설정
        updatePlayMode();
    });
</script>
</body>
</html>
